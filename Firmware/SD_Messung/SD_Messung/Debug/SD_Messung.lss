
SD_Messung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804000  00804000  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c4  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002451  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000547  00000000  00000000  0000518d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000056d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014a6  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  00006c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00006d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_9>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  8c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  90:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  94:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  98:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  9c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  a0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  a4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	df e7       	ldi	r29, 0x7F	; 127
  b2:	de bf       	out	0x3e, r29	; 62

000000b4 <__do_clear_bss>:
  b4:	20 e4       	ldi	r18, 0x40	; 64
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e4       	ldi	r27, 0x40	; 64
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  c8:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <setup_io>:
void timer_stop(void)
{
	cli();	//Interrupts unterdrücken
	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;	//Timer stoppen
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
	sei();	//Interrupts wieder zulassen
  d0:	89 e5       	ldi	r24, 0x59	; 89
  d2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
  d6:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
  e6:	08 95       	ret

000000e8 <setup_vref>:
  e8:	86 e8       	ldi	r24, 0x86	; 134
  ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  ee:	08 95       	ret

000000f0 <setup_adc>:
  f0:	e0 e0       	ldi	r30, 0x00	; 0
  f2:	f6 e0       	ldi	r31, 0x06	; 6
  f4:	82 e8       	ldi	r24, 0x82	; 130
  f6:	80 83       	st	Z, r24
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
 104:	90 e4       	ldi	r25, 0x40	; 64
 106:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__TEXT_REGION_LENGTH__+0x7e0609>
 10a:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <__TEXT_REGION_LENGTH__+0x7e060e>
 10e:	90 81       	ld	r25, Z
 110:	91 60       	ori	r25, 0x01	; 1
 112:	90 83       	st	Z, r25
 114:	e7 ee       	ldi	r30, 0xE7	; 231
 116:	f3 e0       	ldi	r31, 0x03	; 3
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <setup_adc+0x28>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <setup_adc+0x2e>
 11e:	00 00       	nop
 120:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
 124:	08 95       	ret

00000126 <setup_timer>:
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	9e e4       	ldi	r25, 0x4E	; 78
 12a:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 12e:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
 132:	85 e8       	ldi	r24, 0x85	; 133
 134:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <__TEXT_REGION_LENGTH__+0x7e0a0e>
 13e:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7e0a0a>
 142:	08 95       	ret

00000144 <timer_start>:
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	fa e0       	ldi	r31, 0x0A	; 10
 148:	80 81       	ld	r24, Z
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <timer_reset>:
}
void timer_reset (void)
{
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
 150:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
 154:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
 158:	08 95       	ret

0000015a <adc_read>:
}
uint16_t adc_read(void)
{
	return ADC0_RES;
 15a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 15e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
 162:	08 95       	ret

00000164 <main>:

int main(void)
{
	ccp_write_io((void *) & (CLKCTRL.OSCHFCTRLA), (0b10001101)); //HF Clock Runstandby, 4 MHz CLK_Main, Autotune
 164:	6d e8       	ldi	r22, 0x8D	; 141
 166:	88 e6       	ldi	r24, 0x68	; 104
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <ccp_write_io>
	setup_io();
 16e:	0e 94 68 00 	call	0xd0	; 0xd0 <setup_io>
	setup_vref();
 172:	0e 94 74 00 	call	0xe8	; 0xe8 <setup_vref>
	setup_adc();
 176:	0e 94 78 00 	call	0xf0	; 0xf0 <setup_adc>
	setup_timer();
 17a:	0e 94 93 00 	call	0x126	; 0x126 <setup_timer>
	timer_start();
 17e:	0e 94 a2 00 	call	0x144	; 0x144 <timer_start>
	sei();
 182:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f e7       	ldi	r18, 0x7F	; 127
 186:	8a e1       	ldi	r24, 0x1A	; 26
 188:	96 e0       	ldi	r25, 0x06	; 6
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x26>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x30>
 194:	00 00       	nop
 196:	f6 cf       	rjmp	.-20     	; 0x184 <main+0x20>

00000198 <__vector_9>:
		_delay_ms(500);
	}
}

ISR(TCA0_OVF_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	TCA0_SINGLE_INTFLAGS = 1; //Löscht das Interrupt-Flag
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
	timer_reset();	//Timer wieder auf 0
 1c4:	0e 94 a8 00 	call	0x150	; 0x150 <timer_reset>
	messwert = adc_read();
 1c8:	0e 94 ad 00 	call	0x15a	; 0x15a <adc_read>
 1cc:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 1d0:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <ccp_write_io>:
 1fa:	dc 01       	movw	r26, r24
 1fc:	28 ed       	ldi	r18, 0xD8	; 216
 1fe:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
 202:	6c 93       	st	X, r22
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
