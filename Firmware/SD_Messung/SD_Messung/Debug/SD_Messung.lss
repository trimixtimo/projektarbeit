
SD_Messung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000270  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002980  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000243e  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052a  00000000  00000000  000050ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000055d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001491  00000000  00000000  0000568c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  00006b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00006b9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_9>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  68:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  6c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  70:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  74:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  7c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  80:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  84:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  88:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  8c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  90:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  94:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  98:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  9c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  a0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  a4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	df e7       	ldi	r29, 0x7F	; 127
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  b8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <setup_io>:
	sei();	//Interrupts wieder zulassen
}
uint16_t adc_read(void)
{
	return ADC0_RES;
}
  c0:	89 e5       	ldi	r24, 0x59	; 89
  c2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
  c6:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
  d6:	08 95       	ret

000000d8 <setup_vref>:
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  de:	08 95       	ret

000000e0 <setup_adc>:
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f6 e0       	ldi	r31, 0x06	; 6
  e4:	82 e8       	ldi	r24, 0x82	; 130
  e6:	80 83       	st	Z, r24
  e8:	8d e0       	ldi	r24, 0x0D	; 13
  ea:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
  f4:	90 e4       	ldi	r25, 0x40	; 64
  f6:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__TEXT_REGION_LENGTH__+0x7e0609>
  fa:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <__TEXT_REGION_LENGTH__+0x7e060e>
  fe:	90 81       	ld	r25, Z
 100:	91 60       	ori	r25, 0x01	; 1
 102:	90 83       	st	Z, r25
 104:	e7 ee       	ldi	r30, 0xE7	; 231
 106:	f3 e0       	ldi	r31, 0x03	; 3
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <setup_adc+0x28>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <setup_adc+0x2e>
 10e:	00 00       	nop
 110:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
 114:	08 95       	ret

00000116 <setup_timer>:
 116:	88 ee       	ldi	r24, 0xE8	; 232
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 11e:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
 122:	85 e8       	ldi	r24, 0x85	; 133
 124:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <__TEXT_REGION_LENGTH__+0x7e0a0e>
 12e:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7e0a0a>
 132:	08 95       	ret

00000134 <timer_start>:
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	fa e0       	ldi	r31, 0x0A	; 10
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
	ccp_write_io((void *) & (CLKCTRL.OSCHFCTRLA), (0b10001101)); //HF Clock Runstandby, 4 MHz CLK_Main, Autotune
 140:	6d e8       	ldi	r22, 0x8D	; 141
 142:	88 e6       	ldi	r24, 0x68	; 104
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 cc 00 	call	0x198	; 0x198 <ccp_write_io>
	setup_io();
 14a:	0e 94 60 00 	call	0xc0	; 0xc0 <setup_io>
	setup_vref();
 14e:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup_vref>
	setup_adc();
 152:	0e 94 70 00 	call	0xe0	; 0xe0 <setup_adc>
	setup_timer();
 156:	0e 94 8b 00 	call	0x116	; 0x116 <setup_timer>
	timer_start();
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <timer_start>
	sei();
 15e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f e7       	ldi	r18, 0x7F	; 127
 162:	8a e1       	ldi	r24, 0x1A	; 26
 164:	96 e0       	ldi	r25, 0x06	; 6
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x26>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x30>
 170:	00 00       	nop
 172:	f6 cf       	rjmp	.-20     	; 0x160 <main+0x20>

00000174 <__vector_9>:
		_delay_ms(500);
	}
}

ISR(TCA0_OVF_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
	TCA0_SINGLE_INTFLAGS = 1; //muss in der ISR aufgerufen werden
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
	PORTD_OUTTGL = 0b01100000;
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__TEXT_REGION_LENGTH__+0x7e0467>
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <ccp_write_io>:
 198:	dc 01       	movw	r26, r24
 19a:	28 ed       	ldi	r18, 0xD8	; 216
 19c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
 1a0:	6c 93       	st	X, r22
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
