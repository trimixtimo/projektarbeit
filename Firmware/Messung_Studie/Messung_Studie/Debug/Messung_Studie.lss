
Messung_Studie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00804000  00804000  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dbc  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002561  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000613  00000000  00000000  000057b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00005dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001733  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000277  00000000  00000000  0000765b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000078d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_9>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  8c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  90:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  94:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  98:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  9c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  a0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  a4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	df e7       	ldi	r29, 0x7F	; 127
  b2:	de bf       	out	0x3e, r29	; 62

000000b4 <__do_clear_bss>:
  b4:	20 e4       	ldi	r18, 0x40	; 64
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e4       	ldi	r27, 0x40	; 64
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a3 30       	cpi	r26, 0x03	; 3
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  c8:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <setup_io>:
void timer_stop(void)
{
	cli();	//Interrupts unterdrücken
	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;	//Timer stoppen
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
	sei();	//Interrupts wieder zulassen
  d0:	89 e5       	ldi	r24, 0x59	; 89
  d2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
  d6:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
  e6:	08 95       	ret

000000e8 <setup_vref>:
  e8:	86 e8       	ldi	r24, 0x86	; 134
  ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  ee:	08 95       	ret

000000f0 <setup_adc>:
  f0:	e0 e0       	ldi	r30, 0x00	; 0
  f2:	f6 e0       	ldi	r31, 0x06	; 6
  f4:	82 e8       	ldi	r24, 0x82	; 130
  f6:	80 83       	st	Z, r24
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
 104:	90 e4       	ldi	r25, 0x40	; 64
 106:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <__TEXT_REGION_LENGTH__+0x7e0609>
 10a:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <__TEXT_REGION_LENGTH__+0x7e060e>
 10e:	90 81       	ld	r25, Z
 110:	91 60       	ori	r25, 0x01	; 1
 112:	90 83       	st	Z, r25
 114:	e7 ee       	ldi	r30, 0xE7	; 231
 116:	f3 e0       	ldi	r31, 0x03	; 3
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <setup_adc+0x28>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <setup_adc+0x2e>
 11e:	00 00       	nop
 120:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
 124:	08 95       	ret

00000126 <setup_timer>:
 126:	88 ee       	ldi	r24, 0xE8	; 232
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 12e:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
 132:	85 e8       	ldi	r24, 0x85	; 133
 134:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <__TEXT_REGION_LENGTH__+0x7e0a0e>
 13e:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7e0a0a>
 142:	08 95       	ret

00000144 <setup_uart>:
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f8 e0       	ldi	r31, 0x08	; 8
 148:	85 e1       	ldi	r24, 0x15	; 21
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	80 87       	std	Z+8, r24	; 0x08
 14e:	91 87       	std	Z+9, r25	; 0x09
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	87 83       	std	Z+7, r24	; 0x07
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	83 87       	std	Z+11, r24	; 0x0b
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	86 83       	std	Z+6, r24	; 0x06
 15c:	08 95       	ret

0000015e <uart0_sendChar>:
 15e:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
 162:	95 ff       	sbrs	r25, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <uart0_sendChar>
 166:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
 16a:	08 95       	ret

0000016c <uart0_sendString>:
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	07 c0       	rjmp	.+14     	; 0x186 <uart0_sendString+0x1a>
 178:	fe 01       	movw	r30, r28
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	80 81       	ld	r24, Z
 180:	0e 94 af 00 	call	0x15e	; 0x15e <uart0_sendChar>
 184:	1f 5f       	subi	r17, 0xFF	; 255
 186:	81 2f       	mov	r24, r17
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fe 01       	movw	r30, r28
 18c:	01 90       	ld	r0, Z+
 18e:	00 20       	and	r0, r0
 190:	e9 f7       	brne	.-6      	; 0x18c <uart0_sendString+0x20>
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	ec 1b       	sub	r30, r28
 196:	fd 0b       	sbc	r31, r29
 198:	8e 17       	cp	r24, r30
 19a:	9f 07       	cpc	r25, r31
 19c:	68 f3       	brcs	.-38     	; 0x178 <uart0_sendString+0xc>
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret

000001a6 <timer_reset>:
}
void timer_reset (void)
{
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
 1a6:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
 1aa:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
 1ae:	08 95       	ret

000001b0 <adc_read>:
}
uint16_t adc_read(void)
{
	return ADC0_RES;
 1b0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 1b4:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
 1b8:	08 95       	ret

000001ba <wert_senden>:
void wert_senden(uint16_t wert)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <wert_senden+0x6>
 1c0:	1f 92       	push	r1
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1c6:	4a e0       	ldi	r20, 0x0A	; 10
 1c8:	be 01       	movw	r22, r28
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	0e 94 48 01 	call	0x290	; 0x290 <__itoa_ncheck>
	char buffer[3];
	itoa(wert, buffer, 10);
	uart0_sendString(buffer);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 b6 00 	call	0x16c	; 0x16c <uart0_sendString>
}
 1da:	23 96       	adiw	r28, 0x03	; 3
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <main>:

int main(void)
{
	ccp_write_io((void *) & (CLKCTRL.OSCHFCTRLA), (0b10001101)); //HF Clock Runstandby, 4 MHz CLK_Main, Autotune, CLK_PER = CLK_Main
 1e6:	6d e8       	ldi	r22, 0x8D	; 141
 1e8:	88 e6       	ldi	r24, 0x68	; 104
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ccp_write_io>
	setup_io();
 1f0:	0e 94 68 00 	call	0xd0	; 0xd0 <setup_io>
	setup_vref();
 1f4:	0e 94 74 00 	call	0xe8	; 0xe8 <setup_vref>
	setup_adc();
 1f8:	0e 94 78 00 	call	0xf0	; 0xf0 <setup_adc>
	setup_timer();
 1fc:	0e 94 93 00 	call	0x126	; 0x126 <setup_timer>
	setup_uart();
 200:	0e 94 a2 00 	call	0x144	; 0x144 <setup_uart>
	sei();
 204:	78 94       	sei
		} 
		else//Schalter aus
		{
			timer_stop();	//Messung stoppen
		}*/
		wert_senden(messwert);
 206:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <messwert>
 20a:	90 91 02 40 	lds	r25, 0x4002	; 0x804002 <messwert+0x1>
 20e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <wert_senden>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	8a e1       	ldi	r24, 0x1A	; 26
 216:	96 e0       	ldi	r25, 0x06	; 6
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 220:	00 c0       	rjmp	.+0      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 222:	00 00       	nop
 224:	f0 cf       	rjmp	.-32     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>

00000226 <__vector_9>:
		_delay_ms(500);
	}
}

ISR(TCA0_OVF_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	cf 93       	push	r28
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	TCA0_SINGLE_INTFLAGS = 1; //Löscht das Interrupt-Flag
 24e:	c1 e0       	ldi	r28, 0x01	; 1
 250:	c0 93 0b 0a 	sts	0x0A0B, r28	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
	timer_reset();	//Timer wieder auf 0
 254:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <timer_reset>
	messwert = adc_read();
 258:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <adc_read>
 25c:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <messwert>
 260:	90 93 02 40 	sts	0x4002, r25	; 0x804002 <messwert+0x1>
	neuer_messwert = true;
 264:	c0 93 00 40 	sts	0x4000, r28	; 0x804000 <__DATA_REGION_ORIGIN__>
	
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	cf 91       	pop	r28
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__itoa_ncheck>:
 290:	bb 27       	eor	r27, r27
 292:	4a 30       	cpi	r20, 0x0A	; 10
 294:	31 f4       	brne	.+12     	; 0x2a2 <__itoa_ncheck+0x12>
 296:	99 23       	and	r25, r25
 298:	22 f4       	brpl	.+8      	; 0x2a2 <__itoa_ncheck+0x12>
 29a:	bd e2       	ldi	r27, 0x2D	; 45
 29c:	90 95       	com	r25
 29e:	81 95       	neg	r24
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__utoa_common>

000002a6 <__utoa_ncheck>:
 2a6:	bb 27       	eor	r27, r27

000002a8 <__utoa_common>:
 2a8:	fb 01       	movw	r30, r22
 2aa:	55 27       	eor	r21, r21
 2ac:	aa 27       	eor	r26, r26
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	aa 1f       	adc	r26, r26
 2b4:	a4 17       	cp	r26, r20
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__utoa_common+0x14>
 2b8:	a4 1b       	sub	r26, r20
 2ba:	83 95       	inc	r24
 2bc:	50 51       	subi	r21, 0x10	; 16
 2be:	b9 f7       	brne	.-18     	; 0x2ae <__utoa_common+0x6>
 2c0:	a0 5d       	subi	r26, 0xD0	; 208
 2c2:	aa 33       	cpi	r26, 0x3A	; 58
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__utoa_common+0x20>
 2c6:	a9 5d       	subi	r26, 0xD9	; 217
 2c8:	a1 93       	st	Z+, r26
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	79 f7       	brne	.-34     	; 0x2ac <__utoa_common+0x4>
 2ce:	b1 11       	cpse	r27, r1
 2d0:	b1 93       	st	Z+, r27
 2d2:	11 92       	st	Z+, r1
 2d4:	cb 01       	movw	r24, r22
 2d6:	0c 94 6d 01 	jmp	0x2da	; 0x2da <strrev>

000002da <strrev>:
 2da:	dc 01       	movw	r26, r24
 2dc:	fc 01       	movw	r30, r24
 2de:	67 2f       	mov	r22, r23
 2e0:	71 91       	ld	r23, Z+
 2e2:	77 23       	and	r23, r23
 2e4:	e1 f7       	brne	.-8      	; 0x2de <strrev+0x4>
 2e6:	32 97       	sbiw	r30, 0x02	; 2
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <strrev+0x18>
 2ea:	7c 91       	ld	r23, X
 2ec:	6d 93       	st	X+, r22
 2ee:	70 83       	st	Z, r23
 2f0:	62 91       	ld	r22, -Z
 2f2:	ae 17       	cp	r26, r30
 2f4:	bf 07       	cpc	r27, r31
 2f6:	c8 f3       	brcs	.-14     	; 0x2ea <strrev+0x10>
 2f8:	08 95       	ret

000002fa <ccp_write_io>:
 2fa:	dc 01       	movw	r26, r24
 2fc:	28 ed       	ldi	r18, 0xD8	; 216
 2fe:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
 302:	6c 93       	st	X, r22
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
