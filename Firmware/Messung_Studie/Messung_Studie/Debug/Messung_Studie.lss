
Messung_Studie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00804000  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080400e  0080400e  0000050e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ef4  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002540  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000649  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00006098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017c8  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bf  00000000  00000000  00007a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00007deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	df e7       	ldi	r29, 0x7F	; 127
  b2:	de bf       	out	0x3e, r29	; 62

000000b4 <__do_copy_data>:
  b4:	10 e4       	ldi	r17, 0x40	; 64
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e4       	ldi	r27, 0x40	; 64
  ba:	ec e6       	ldi	r30, 0x6C	; 108
  bc:	f4 e0       	ldi	r31, 0x04	; 4
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 30       	cpi	r26, 0x0E	; 14
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	20 e4       	ldi	r18, 0x40	; 64
  d0:	ae e0       	ldi	r26, 0x0E	; 14
  d2:	b0 e4       	ldi	r27, 0x40	; 64
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 31       	cpi	r26, 0x19	; 25
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 32 01 	call	0x264	; 0x264 <main>
  e2:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <setup_io>:
uint16_t mode;
uint8_t hull;

void setup_io(void)
{
	PORTA_DIR = 0b01011001;	//SPI Interface Input/Output
  ea:	89 e5       	ldi	r24, 0x59	; 89
  ec:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	PORTC_DIR = 0b00000000;	//Alles Eingänge, Button an C0
  f0:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	PORTD_DIR = 0b01100000;	//LED Outputs 5,6
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	PORTC_PIN0CTRL = (1 << 3);	//Pullup für Button an C0
  fa:	98 e0       	ldi	r25, 0x08	; 8
  fc:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
	PORTD_OUTSET = 0b01100000;	//beide LEDs an
 100:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7e0465>
 104:	08 95       	ret

00000106 <setup_vref>:
}
void setup_vref(void)
{
	VREF_ADC0REF = VREF_ALWAYSON_bm | VREF_REFSEL_VREFA_gc;	//Referenzspannung immer an, externe Referenzspannung VREFA
 106:	86 e8       	ldi	r24, 0x86	; 134
 108:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 10c:	08 95       	ret

0000010e <setup_adc>:
}
void setup_adc(void)
{
	ADC0_CTRLA = (ADC_RUNSTBY_bm | ADC_FREERUN_bm);	//Freerunning Modus, Single Ended 12bit, kein Leftadjust, Runstandby	
 10e:	82 e8       	ldi	r24, 0x82	; 130
 110:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
	ADC0_CTRLC = ADC_PRESC_DIV32_gc;	//niedriger Takt für maximale Auflösung: 16 MHz / 32 = 500 kHz ADC Takt
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
	ADC0_MUXNEG = 0x40; //überflüssig, weil single-ended, nur zur Sicherheit
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <__TEXT_REGION_LENGTH__+0x7e0609>
	ADC0_DBGCTRL = ADC_DBGRUN_bm;	//ADC debugging
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <__TEXT_REGION_LENGTH__+0x7e060e>
	ADC0_SAMPCTRL = 0x10;		//Sample Dauer um 16 Takte verlängern -> geringere Belastung der Signalquelle
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7e0605>
 12c:	08 95       	ret

0000012e <setup_timer>:
}
void setup_timer(void)
{
	TCA0_SINGLE_PER = periodendauer_us;
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 136:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
	TCA0_SINGLE_CTRLA = (TCA_SINGLE_RUNSTDBY_bm | (0x04 << 1) | TCA_SINGLE_ENABLE_bm);	//Prescaler 16: 16 MHz / 16 = 1 MHz
 13a:	89 e8       	ldi	r24, 0x89	; 137
 13c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
	TCA0_SINGLE_DBGCTRL = 0x01;	//debugging
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <__TEXT_REGION_LENGTH__+0x7e0a0e>
	TCA0_SINGLE_INTCTRL = TCA_SINGLE_OVF_bm;	//Überlauf-Interrupt aktiviert	
 146:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7e0a0a>
 14a:	08 95       	ret

0000014c <setup_uart>:
}
void setup_uart(void)
{
	USART0.BAUD = (uint16_t) baudrate_reg(baudrate);	//set Baud rate
 14c:	e0 e0       	ldi	r30, 0x00	; 0
 14e:	f8 e0       	ldi	r31, 0x08	; 8
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	80 87       	std	Z+8, r24	; 0x08
 156:	91 87       	std	Z+9, r25	; 0x09
	USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;	//asynchron | no parity | 1 stop bit | 8 data bits
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	87 83       	std	Z+7, r24	; 0x07
	USART0.CTRLA = USART_RXCIE_bm;	//enable receive interrupt
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	85 83       	std	Z+5, r24	; 0x05
	USART0.DBGCTRL = USART_DBGRUN_bm;	//debugging mode
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	83 87       	std	Z+11, r24	; 0x0b
	USART0.CTRLB = USART_RXEN_bm |USART_TXEN_bm;	//uart rx und tx aktivieren
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	86 83       	std	Z+6, r24	; 0x06
 168:	08 95       	ret

0000016a <uart0_sendChar>:
}

void uart0_sendChar(char c)
{
	while (!(USART0.STATUS & USART_DREIF_bm)){;}
 16a:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <uart0_sendChar>
	USART0.TXDATAL = c;
 172:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
 176:	08 95       	ret

00000178 <uart0_sendString>:
}
void uart0_sendString(char *str)
{
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < strlen(str); i++)
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	07 c0       	rjmp	.+14     	; 0x192 <uart0_sendString+0x1a>
	{
		uart0_sendChar(str[i]);
 184:	fe 01       	movw	r30, r28
 186:	e8 0f       	add	r30, r24
 188:	f9 1f       	adc	r31, r25
 18a:	80 81       	ld	r24, Z
 18c:	0e 94 b5 00 	call	0x16a	; 0x16a <uart0_sendChar>
	while (!(USART0.STATUS & USART_DREIF_bm)){;}
	USART0.TXDATAL = c;
}
void uart0_sendString(char *str)
{
	for (uint8_t i = 0; i < strlen(str); i++)
 190:	1f 5f       	subi	r17, 0xFF	; 255
 192:	81 2f       	mov	r24, r17
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fe 01       	movw	r30, r28
 198:	01 90       	ld	r0, Z+
 19a:	00 20       	and	r0, r0
 19c:	e9 f7       	brne	.-6      	; 0x198 <uart0_sendString+0x20>
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	ec 1b       	sub	r30, r28
 1a2:	fd 0b       	sbc	r31, r29
 1a4:	8e 17       	cp	r24, r30
 1a6:	9f 07       	cpc	r25, r31
 1a8:	68 f3       	brcs	.-38     	; 0x184 <uart0_sendString+0xc>
	{
		uart0_sendChar(str[i]);
	}
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	08 95       	ret

000001b2 <timer_start>:
void timer_start(void)
{
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;	//Timer starten
 1b2:	e0 e0       	ldi	r30, 0x00	; 0
 1b4:	fa e0       	ldi	r31, 0x0A	; 10
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <timer_stop>:
}
void timer_stop(void)
{
	cli();	//Interrupts unterdrücken
 1be:	f8 94       	cli
	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;	//Timer stoppen
 1c0:	e0 e0       	ldi	r30, 0x00	; 0
 1c2:	fa e0       	ldi	r31, 0x0A	; 10
 1c4:	80 81       	ld	r24, Z
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	80 83       	st	Z, r24
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
 1ca:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
 1ce:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
	sei();	//Interrupts wieder zulassen
 1d2:	78 94       	sei
 1d4:	08 95       	ret

000001d6 <timer_reset>:
}
void timer_reset (void)
{
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
 1d6:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
 1da:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
 1de:	08 95       	ret

000001e0 <adc_channel_selection>:
}
void adc_channel_selection(void){
	ADC0_COMMAND = ADC_SPCONV_bm;	//Messung stoppen
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
	if (hull == 1)
 1e6:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <hull>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <adc_channel_selection+0x16>
	{
		ADC0_MUXPOS = 0x02; //für HULL-Input
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <adc_channel_selection+0x1c>
	}
	else
	{
		ADC0_MUXPOS = 0x01; //für RAW-Input
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	8f e9       	ldi	r24, 0x9F	; 159
 1fe:	9f e0       	ldi	r25, 0x0F	; 15
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <__EEPROM_REGION_LENGTH__>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 206:	00 00       	nop
	}
	_delay_ms(1);
	ADC0_CTRLA |= ADC_ENABLE_bm;	//ADC einschalten
 208:	e0 e0       	ldi	r30, 0x00	; 0
 20a:	f6 e0       	ldi	r31, 0x06	; 6
 20c:	80 81       	ld	r24, Z
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	80 83       	st	Z, r24
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 21c:	00 00       	nop
	_delay_ms(1);
	ADC0_COMMAND = ADC_STCONV_bm;	//erste Messung starten
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
 224:	08 95       	ret

00000226 <adc_read>:
}
uint16_t adc_read(void)
{
	return ADC0_RES;
 226:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 22a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
 22e:	08 95       	ret

00000230 <wert_senden>:
void wert_senden(uint16_t wert)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <wert_senden+0x6>
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 23c:	40 e1       	ldi	r20, 0x10	; 16
 23e:	be 01       	movw	r22, r28
 240:	6f 5f       	subi	r22, 0xFF	; 255
 242:	7f 4f       	sbci	r23, 0xFF	; 255
 244:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__itoa_ncheck>
	char buffer[3];
	itoa(wert, buffer, 16);
	uart0_sendString(buffer);
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	0e 94 bc 00 	call	0x178	; 0x178 <uart0_sendString>
	uart0_sendString("\n");
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e4       	ldi	r25, 0x40	; 64
 254:	0e 94 bc 00 	call	0x178	; 0x178 <uart0_sendString>
}
 258:	23 96       	adiw	r28, 0x03	; 3
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <main>:

int main(void)
{
	CCP = CCP_IOREG_gc;	//geschützes Register entsperren
 264:	88 ed       	ldi	r24, 0xD8	; 216
 266:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA = 0b10011101; //HF Clock Runstandby, 16 MHz CLK_Main, Autotune, CLK_PER = CLK_Main
 268:	8d e9       	ldi	r24, 0x9D	; 157
 26a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	CPUINT.LVL1VEC = USART0_RXC_vect_num;
 26e:	85 e1       	ldi	r24, 0x15	; 21
 270:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7e0113>
	
	setup_io();
 274:	0e 94 75 00 	call	0xea	; 0xea <setup_io>
	setup_vref();
 278:	0e 94 83 00 	call	0x106	; 0x106 <setup_vref>
	setup_adc();
 27c:	0e 94 87 00 	call	0x10e	; 0x10e <setup_adc>
	setup_timer();
 280:	0e 94 97 00 	call	0x12e	; 0x12e <setup_timer>
	timer_stop();
 284:	0e 94 df 00 	call	0x1be	; 0x1be <timer_stop>
	setup_uart();
 288:	0e 94 a6 00 	call	0x14c	; 0x14c <setup_uart>
	adc_channel_selection();
 28c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_channel_selection>
	
	sei();
 290:	78 94       	sei
 292:	ff cf       	rjmp	.-2      	; 0x292 <main+0x2e>

00000294 <__vector_9>:
		*/
	}
}

ISR(TCA0_OVF_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	0b b6       	in	r0, 0x3b	; 59
 2a0:	0f 92       	push	r0
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	cf 93       	push	r28
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	TCA0_SINGLE_INTFLAGS = 1; //löscht das Interrupt-Flag
 2bc:	c1 e0       	ldi	r28, 0x01	; 1
 2be:	c0 93 0b 0a 	sts	0x0A0B, r28	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
	timer_reset();	//Timer wieder auf 0
 2c2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <timer_reset>
	wert_senden(adc_read());
 2c6:	0e 94 13 01 	call	0x226	; 0x226 <adc_read>
 2ca:	0e 94 18 01 	call	0x230	; 0x230 <wert_senden>
	neuer_messwert = 1;
 2ce:	c0 93 0f 40 	sts	0x400F, r28	; 0x80400f <neuer_messwert>
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	cf 91       	pop	r28
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_21>:

ISR(USART0_RXC_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	0b b6       	in	r0, 0x3b	; 59
 306:	0f 92       	push	r0
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	cf 93       	push	r28
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	unsigned char nextChar;
	nextChar = USART0.RXDATAL;	//8 data bis, only use low register
 322:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7e0800>
	if (1 == 1) //if latest string got precessed completely
	{
		if (nextChar != '\n' && nextChar != '\r' && uart0_str_count < uart0_maxstrlen)	//save char if not end of line or max
 326:	8a 30       	cpi	r24, 0x0A	; 10
 328:	91 f0       	breq	.+36     	; 0x34e <__vector_21+0x54>
 32a:	8d 30       	cpi	r24, 0x0D	; 13
 32c:	81 f0       	breq	.+32     	; 0x34e <__vector_21+0x54>
 32e:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <uart0_str_count>
 332:	94 30       	cpi	r25, 0x04	; 4
 334:	60 f4       	brcc	.+24     	; 0x34e <__vector_21+0x54>
		{
			uart0_string[uart0_str_count] = nextChar;
 336:	e0 91 15 40 	lds	r30, 0x4015	; 0x804015 <uart0_str_count>
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	e0 5f       	subi	r30, 0xF0	; 240
 33e:	ff 4b       	sbci	r31, 0xBF	; 191
 340:	80 83       	st	Z, r24
			uart0_str_count++;
 342:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <uart0_str_count>
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <uart0_str_count>
 34c:	3b c0       	rjmp	.+118    	; 0x3c4 <__vector_21+0xca>
		}
		else	//end of line or max length reached
		{
			uart0_str_count = 0;
 34e:	10 92 15 40 	sts	0x4015, r1	; 0x804015 <uart0_str_count>
			
			if (strcmp(uart0_string, hull_cmd) == 0)
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	70 e4       	ldi	r23, 0x40	; 64
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	90 e4       	ldi	r25, 0x40	; 64
 35a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <strcmp>
 35e:	89 2b       	or	r24, r25
 360:	49 f4       	brne	.+18     	; 0x374 <__vector_21+0x7a>
			{
				hull = 1;
 362:	c1 e0       	ldi	r28, 0x01	; 1
 364:	c0 93 16 40 	sts	0x4016, r28	; 0x804016 <hull>
				adc_channel_selection();
 368:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_channel_selection>
				timer_start();	//Messung starten
 36c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <timer_start>
				messung_laeuft = true;
 370:	c0 93 0e 40 	sts	0x400E, r28	; 0x80400e <__data_end>

			}
			if(strcmp(uart0_string, raw_cmd) == 0)
 374:	66 e0       	ldi	r22, 0x06	; 6
 376:	70 e4       	ldi	r23, 0x40	; 64
 378:	80 e1       	ldi	r24, 0x10	; 16
 37a:	90 e4       	ldi	r25, 0x40	; 64
 37c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <strcmp>
 380:	89 2b       	or	r24, r25
 382:	79 f4       	brne	.+30     	; 0x3a2 <__vector_21+0xa8>
			{
				hull = 0;
 384:	10 92 16 40 	sts	0x4016, r1	; 0x804016 <hull>
				adc_channel_selection();
 388:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_channel_selection>
				timer_start();	//Messung starten
 38c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <timer_start>
				messung_laeuft = true;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 0e 40 	sts	0x400E, r24	; 0x80400e <__data_end>
				PORTD_OUTSET = 0b01000000;	//blau
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7e0465>
				PORTD_OUTCLR = 0b00100000;	//grün aus
 39c:	80 e2       	ldi	r24, 0x20	; 32
 39e:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7e0466>
			}
			if(strcmp(uart0_string, stop_cmd) == 0)
 3a2:	6a e0       	ldi	r22, 0x0A	; 10
 3a4:	70 e4       	ldi	r23, 0x40	; 64
 3a6:	80 e1       	ldi	r24, 0x10	; 16
 3a8:	90 e4       	ldi	r25, 0x40	; 64
 3aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <strcmp>
 3ae:	89 2b       	or	r24, r25
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <__vector_21+0xca>
			{
				neuer_messwert = 0;
 3b2:	10 92 0f 40 	sts	0x400F, r1	; 0x80400f <neuer_messwert>
				timer_stop();	//Messung stoppen
 3b6:	0e 94 df 00 	call	0x1be	; 0x1be <timer_stop>
				messung_laeuft = false;
 3ba:	10 92 0e 40 	sts	0x400E, r1	; 0x80400e <__data_end>
				PORTD_OUTSET = 0b01100000;	//beide LEDs
 3be:	80 e6       	ldi	r24, 0x60	; 96
 3c0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7e0465>
			}			
		}
	}
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	cf 91       	pop	r28
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0b be       	out	0x3b, r0	; 59
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <strcmp>:
 3ec:	fb 01       	movw	r30, r22
 3ee:	dc 01       	movw	r26, r24
 3f0:	8d 91       	ld	r24, X+
 3f2:	01 90       	ld	r0, Z+
 3f4:	80 19       	sub	r24, r0
 3f6:	01 10       	cpse	r0, r1
 3f8:	d9 f3       	breq	.-10     	; 0x3f0 <strcmp+0x4>
 3fa:	99 0b       	sbc	r25, r25
 3fc:	08 95       	ret

000003fe <__itoa_ncheck>:
 3fe:	bb 27       	eor	r27, r27
 400:	4a 30       	cpi	r20, 0x0A	; 10
 402:	31 f4       	brne	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 404:	99 23       	and	r25, r25
 406:	22 f4       	brpl	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	bd e2       	ldi	r27, 0x2D	; 45
 40a:	90 95       	com	r25
 40c:	81 95       	neg	r24
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	0c 94 0b 02 	jmp	0x416	; 0x416 <__utoa_common>

00000414 <__utoa_ncheck>:
 414:	bb 27       	eor	r27, r27

00000416 <__utoa_common>:
 416:	fb 01       	movw	r30, r22
 418:	55 27       	eor	r21, r21
 41a:	aa 27       	eor	r26, r26
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	aa 1f       	adc	r26, r26
 422:	a4 17       	cp	r26, r20
 424:	10 f0       	brcs	.+4      	; 0x42a <__utoa_common+0x14>
 426:	a4 1b       	sub	r26, r20
 428:	83 95       	inc	r24
 42a:	50 51       	subi	r21, 0x10	; 16
 42c:	b9 f7       	brne	.-18     	; 0x41c <__utoa_common+0x6>
 42e:	a0 5d       	subi	r26, 0xD0	; 208
 430:	aa 33       	cpi	r26, 0x3A	; 58
 432:	08 f0       	brcs	.+2      	; 0x436 <__utoa_common+0x20>
 434:	a9 5d       	subi	r26, 0xD9	; 217
 436:	a1 93       	st	Z+, r26
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	79 f7       	brne	.-34     	; 0x41a <__utoa_common+0x4>
 43c:	b1 11       	cpse	r27, r1
 43e:	b1 93       	st	Z+, r27
 440:	11 92       	st	Z+, r1
 442:	cb 01       	movw	r24, r22
 444:	0c 94 24 02 	jmp	0x448	; 0x448 <strrev>

00000448 <strrev>:
 448:	dc 01       	movw	r26, r24
 44a:	fc 01       	movw	r30, r24
 44c:	67 2f       	mov	r22, r23
 44e:	71 91       	ld	r23, Z+
 450:	77 23       	and	r23, r23
 452:	e1 f7       	brne	.-8      	; 0x44c <strrev+0x4>
 454:	32 97       	sbiw	r30, 0x02	; 2
 456:	04 c0       	rjmp	.+8      	; 0x460 <strrev+0x18>
 458:	7c 91       	ld	r23, X
 45a:	6d 93       	st	X+, r22
 45c:	70 83       	st	Z, r23
 45e:	62 91       	ld	r22, -Z
 460:	ae 17       	cp	r26, r30
 462:	bf 07       	cpc	r27, r31
 464:	c8 f3       	brcs	.-14     	; 0x458 <strrev+0x10>
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
