
Messung_Studie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00804000  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00804002  00804002  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dc1  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002546  00000000  00000000  00003319  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000663  00000000  00000000  0000585f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00005ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001739  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000277  00000000  00000000  0000775d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000079d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	df e7       	ldi	r29, 0x7F	; 127
  b2:	de bf       	out	0x3e, r29	; 62

000000b4 <__do_copy_data>:
  b4:	10 e4       	ldi	r17, 0x40	; 64
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e4       	ldi	r27, 0x40	; 64
  ba:	e6 ea       	ldi	r30, 0xA6	; 166
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	20 e4       	ldi	r18, 0x40	; 64
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b0 e4       	ldi	r27, 0x40	; 64
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 30       	cpi	r26, 0x07	; 7
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 20 01 	call	0x240	; 0x240 <main>
  e2:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <setup_io>:
bool messung_laeuft = 0;		//laufende Messung
bool hull = false;

void setup_io(void)
{
	PORTA_DIR = 0b01011001;	//SPI Interface Input/Output
  ea:	89 e5       	ldi	r24, 0x59	; 89
  ec:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	PORTC_DIR = 0b00000000;	//Alles Eingänge, Button an C0
  f0:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	PORTD_DIR = 0b01100000;	//LED Outputs 5,6
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	PORTC_PIN0CTRL = (1 << 3);	//Pullup für Button an C0
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7e0450>
 100:	08 95       	ret

00000102 <setup_vref>:
}
void setup_vref(void)
{
	VREF_ADC0REF = VREF_ALWAYSON_bm | VREF_REFSEL_VREFA_gc;	//Referenzspannung immer an, externe Referenzspannung VREFA
 102:	86 e8       	ldi	r24, 0x86	; 134
 104:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 108:	08 95       	ret

0000010a <setup_adc>:
}
void setup_adc(void)
{
	ADC0_CTRLA = (ADC_RUNSTBY_bm | ADC_FREERUN_bm);	//Freerunning Modus, Single Ended 12bit, kein Leftadjust, Runstandby	
 10a:	82 e8       	ldi	r24, 0x82	; 130
 10c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7e0600>
	ADC0_CTRLC = ADC_PRESC_DIV8_gc;	//niedriger Takt für maximale Auflösung: 4 MHz / 256 = 15 kHz ADC Takt
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7e0602>
	if (hull)
 116:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <__data_end>
 11a:	88 23       	and	r24, r24
 11c:	21 f0       	breq	.+8      	; 0x126 <setup_adc+0x1c>
	{
		ADC0_MUXPOS = 0x02; //für HULL-Input
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
 124:	03 c0       	rjmp	.+6      	; 0x12c <setup_adc+0x22>
	} 
	else
	{
		ADC0_MUXPOS = 0x01; //für RAW-Input
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
	}
	ADC0_MUXNEG = 0x40; //Überflüssig weil Single Ended, zur Sicherheit
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <__TEXT_REGION_LENGTH__+0x7e0609>
	ADC0_DBGCTRL = ADC_DBGRUN_bm;	//ADC debugging
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	90 93 0e 06 	sts	0x060E, r25	; 0x80060e <__TEXT_REGION_LENGTH__+0x7e060e>
	ADC0_CTRLA |= ADC_ENABLE_bm;	//ADC einschalten
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f6 e0       	ldi	r31, 0x06	; 6
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	ef e9       	ldi	r30, 0x9F	; 159
 144:	ff e0       	ldi	r31, 0x0F	; 15
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <setup_adc+0x3c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <setup_adc+0x42>
 14c:	00 00       	nop
	_delay_ms(1);
	ADC0_COMMAND = ADC_STCONV_bm;	//erste Messung starten
 14e:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
 152:	08 95       	ret

00000154 <setup_timer>:
}
void setup_timer(void)
{
	TCA0_SINGLE_PER = periodendauer_us;
 154:	84 e6       	ldi	r24, 0x64	; 100
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 15c:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
	TCA0_SINGLE_CTRLA = (TCA_SINGLE_RUNSTDBY_bm | (0x04 << 1) | TCA_SINGLE_ENABLE_bm);	//Prescaler 4: 4 MHz / 4 = 1 MHz
 160:	89 e8       	ldi	r24, 0x89	; 137
 162:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
	TCA0_SINGLE_DBGCTRL = 0x01;	//debugging
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <__TEXT_REGION_LENGTH__+0x7e0a0e>
	TCA0_SINGLE_INTCTRL = TCA_SINGLE_OVF_bm;	//Überlauf-Interrupt aktiviert	
 16c:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7e0a0a>
 170:	08 95       	ret

00000172 <setup_uart>:
}
void setup_uart(void)
{
	USART0.BAUD = (uint16_t) baudrate_reg(baudrate);	//set Baud rate
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f8 e0       	ldi	r31, 0x08	; 8
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 87       	std	Z+8, r24	; 0x08
 17c:	91 87       	std	Z+9, r25	; 0x09
	USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;	//asynchron | no parity | 1 stop bit | 8 data bits
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	87 83       	std	Z+7, r24	; 0x07
	//USART0.CTRLA = USART_RXCIE_bm;	//enable receive interrupt
	USART0.DBGCTRL = USART_DBGRUN_bm;	//debugging mode
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	83 87       	std	Z+11, r24	; 0x0b
	USART0.CTRLB = USART_RXEN_bm |USART_TXEN_bm;	//uart rx und tx aktivieren
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	86 83       	std	Z+6, r24	; 0x06
 18a:	08 95       	ret

0000018c <uart0_sendChar>:
}

void uart0_sendChar(char c)
{
	while (!(USART0.STATUS & USART_DREIF_bm)){;}
 18c:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7e0804>
 190:	95 ff       	sbrs	r25, 5
 192:	fc cf       	rjmp	.-8      	; 0x18c <uart0_sendChar>
	USART0.TXDATAL = c;
 194:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7e0802>
 198:	08 95       	ret

0000019a <uart0_sendString>:
}
void uart0_sendString(char *str)
{
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < strlen(str); i++)
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <uart0_sendString+0x1a>
	{
		uart0_sendChar(str[i]);
 1a6:	fe 01       	movw	r30, r28
 1a8:	e8 0f       	add	r30, r24
 1aa:	f9 1f       	adc	r31, r25
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 c6 00 	call	0x18c	; 0x18c <uart0_sendChar>
	while (!(USART0.STATUS & USART_DREIF_bm)){;}
	USART0.TXDATAL = c;
}
void uart0_sendString(char *str)
{
	for (uint8_t i = 0; i < strlen(str); i++)
 1b2:	1f 5f       	subi	r17, 0xFF	; 255
 1b4:	81 2f       	mov	r24, r17
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fe 01       	movw	r30, r28
 1ba:	01 90       	ld	r0, Z+
 1bc:	00 20       	and	r0, r0
 1be:	e9 f7       	brne	.-6      	; 0x1ba <uart0_sendString+0x20>
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	ec 1b       	sub	r30, r28
 1c4:	fd 0b       	sbc	r31, r29
 1c6:	8e 17       	cp	r24, r30
 1c8:	9f 07       	cpc	r25, r31
 1ca:	68 f3       	brcs	.-38     	; 0x1a6 <uart0_sendString+0xc>
	{
		uart0_sendChar(str[i]);
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <timer_start>:
void timer_start(void)
{
	TCA0_SINGLE_CTRLA |= TCA_SINGLE_ENABLE_bm;	//Timer starten
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	fa e0       	ldi	r31, 0x0A	; 10
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <timer_stop>:
}
void timer_stop(void)
{
	cli();	//Interrupts unterdrücken
 1e0:	f8 94       	cli
	TCA0_SINGLE_CTRLA &= ~TCA_SINGLE_ENABLE_bm;	//Timer stoppen
 1e2:	e0 e0       	ldi	r30, 0x00	; 0
 1e4:	fa e0       	ldi	r31, 0x0A	; 10
 1e6:	80 81       	ld	r24, Z
 1e8:	8e 7f       	andi	r24, 0xFE	; 254
 1ea:	80 83       	st	Z, r24
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
 1ec:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
 1f0:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
	sei();	//Interrupts wieder zulassen
 1f4:	78 94       	sei
 1f6:	08 95       	ret

000001f8 <timer_reset>:
}
void timer_reset (void)
{
	TCA0_SINGLE_CNT = 0x00;	//Timer zurücksetzen
 1f8:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7e0a20>
 1fc:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7e0a21>
 200:	08 95       	ret

00000202 <adc_read>:
}
uint16_t adc_read(void)
{
	return ADC0_RES;
 202:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 206:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
}
 20a:	08 95       	ret

0000020c <wert_senden>:
void wert_senden(uint16_t wert)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	00 d0       	rcall	.+0      	; 0x212 <wert_senden+0x6>
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 218:	40 e1       	ldi	r20, 0x10	; 16
 21a:	be 01       	movw	r22, r28
 21c:	6f 5f       	subi	r22, 0xFF	; 255
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	0e 94 96 01 	call	0x32c	; 0x32c <__itoa_ncheck>
	char buffer[3];
	itoa(wert, buffer, 16);
	uart0_sendString(buffer);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	0e 94 cd 00 	call	0x19a	; 0x19a <uart0_sendString>
	uart0_sendString("\n");
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e4       	ldi	r25, 0x40	; 64
 230:	0e 94 cd 00 	call	0x19a	; 0x19a <uart0_sendString>
}
 234:	23 96       	adiw	r28, 0x03	; 3
 236:	cd bf       	out	0x3d, r28	; 61
 238:	de bf       	out	0x3e, r29	; 62
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <main>:

int main(void)
{
	ccp_write_io((void *) & (CLKCTRL.OSCHFCTRLA), (0b10011101)); //HF Clock Runstandby, 4 MHz CLK_Main, Autotune, CLK_PER = CLK_Main
 240:	6d e9       	ldi	r22, 0x9D	; 157
 242:	88 e6       	ldi	r24, 0x68	; 104
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 cb 01 	call	0x396	; 0x396 <ccp_write_io>
	setup_io();
 24a:	0e 94 75 00 	call	0xea	; 0xea <setup_io>
	setup_vref();
 24e:	0e 94 81 00 	call	0x102	; 0x102 <setup_vref>
	setup_adc();
 252:	0e 94 85 00 	call	0x10a	; 0x10a <setup_adc>
	setup_timer();
 256:	0e 94 aa 00 	call	0x154	; 0x154 <setup_timer>
	setup_uart();
 25a:	0e 94 b9 00 	call	0x172	; 0x172 <setup_uart>
	sei();
 25e:	78 94       	sei
	while(1)
	{
		if (hull)
 260:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <__data_end>
 264:	88 23       	and	r24, r24
 266:	21 f0       	breq	.+8      	; 0x270 <main+0x30>
		{
			PORTD_OUTSET = 0b00100000;	//grün
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7e0465>
 26e:	03 c0       	rjmp	.+6      	; 0x276 <main+0x36>
		} 
		else
		{
			PORTD_OUTSET = 0b01000000;	//blau
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7e0465>
		}
		
		if(!(PORTC_IN & 0x01))	//Schalter ein
 276:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7e0448>
 27a:	80 fd       	sbrc	r24, 0
 27c:	1a c0       	rjmp	.+52     	; 0x2b2 <main+0x72>
		{
			if (messung_laeuft)	//Messung läuft bereits
 27e:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <messung_laeuft>
 282:	88 23       	and	r24, r24
 284:	69 f0       	breq	.+26     	; 0x2a0 <main+0x60>
			{
				if (neuer_messwert)	//Neuer Messwert vorhanden
 286:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <neuer_messwert>
 28a:	88 23       	and	r24, r24
 28c:	49 f3       	breq	.-46     	; 0x260 <main+0x20>
				{
					wert_senden(messwert);
 28e:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <messwert>
 292:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <messwert+0x1>
 296:	0e 94 06 01 	call	0x20c	; 0x20c <wert_senden>
					neuer_messwert = false;
 29a:	10 92 04 40 	sts	0x4004, r1	; 0x804004 <neuer_messwert>
 29e:	e0 cf       	rjmp	.-64     	; 0x260 <main+0x20>
				}
			} 
			else //Messung läuft noch nicht
			{
				timer_start();	//Messung starten
 2a0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <timer_start>
				messung_laeuft = true;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 03 40 	sts	0x4003, r24	; 0x804003 <messung_laeuft>
				PORTD_OUTSET = 0b01100000;
 2aa:	80 e6       	ldi	r24, 0x60	; 96
 2ac:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7e0465>
 2b0:	d7 cf       	rjmp	.-82     	; 0x260 <main+0x20>
			}
		}
		else//Schalter aus
		{
			timer_stop();	//Messung stoppen
 2b2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <timer_stop>
			messung_laeuft = false;
 2b6:	10 92 03 40 	sts	0x4003, r1	; 0x804003 <messung_laeuft>
			PORTD_OUTCLR = 0b01100000;
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7e0466>
 2c0:	cf cf       	rjmp	.-98     	; 0x260 <main+0x20>

000002c2 <__vector_9>:
		}
	}
}

ISR(TCA0_OVF_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	0f 92       	push	r0
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	cf 93       	push	r28
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
	TCA0_SINGLE_INTFLAGS = 1; //Löscht das Interrupt-Flag
 2ea:	c1 e0       	ldi	r28, 0x01	; 1
 2ec:	c0 93 0b 0a 	sts	0x0A0B, r28	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
	timer_reset();	//Timer wieder auf 0
 2f0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <timer_reset>
	messwert = adc_read();
 2f4:	0e 94 01 01 	call	0x202	; 0x202 <adc_read>
 2f8:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <messwert>
 2fc:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <messwert+0x1>
	neuer_messwert = true;
 300:	c0 93 04 40 	sts	0x4004, r28	; 0x804004 <neuer_messwert>
	
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	cf 91       	pop	r28
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0b be       	out	0x3b, r0	; 59
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__itoa_ncheck>:
 32c:	bb 27       	eor	r27, r27
 32e:	4a 30       	cpi	r20, 0x0A	; 10
 330:	31 f4       	brne	.+12     	; 0x33e <__itoa_ncheck+0x12>
 332:	99 23       	and	r25, r25
 334:	22 f4       	brpl	.+8      	; 0x33e <__itoa_ncheck+0x12>
 336:	bd e2       	ldi	r27, 0x2D	; 45
 338:	90 95       	com	r25
 33a:	81 95       	neg	r24
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	0c 94 a2 01 	jmp	0x344	; 0x344 <__utoa_common>

00000342 <__utoa_ncheck>:
 342:	bb 27       	eor	r27, r27

00000344 <__utoa_common>:
 344:	fb 01       	movw	r30, r22
 346:	55 27       	eor	r21, r21
 348:	aa 27       	eor	r26, r26
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	a4 17       	cp	r26, r20
 352:	10 f0       	brcs	.+4      	; 0x358 <__utoa_common+0x14>
 354:	a4 1b       	sub	r26, r20
 356:	83 95       	inc	r24
 358:	50 51       	subi	r21, 0x10	; 16
 35a:	b9 f7       	brne	.-18     	; 0x34a <__utoa_common+0x6>
 35c:	a0 5d       	subi	r26, 0xD0	; 208
 35e:	aa 33       	cpi	r26, 0x3A	; 58
 360:	08 f0       	brcs	.+2      	; 0x364 <__utoa_common+0x20>
 362:	a9 5d       	subi	r26, 0xD9	; 217
 364:	a1 93       	st	Z+, r26
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	79 f7       	brne	.-34     	; 0x348 <__utoa_common+0x4>
 36a:	b1 11       	cpse	r27, r1
 36c:	b1 93       	st	Z+, r27
 36e:	11 92       	st	Z+, r1
 370:	cb 01       	movw	r24, r22
 372:	0c 94 bb 01 	jmp	0x376	; 0x376 <strrev>

00000376 <strrev>:
 376:	dc 01       	movw	r26, r24
 378:	fc 01       	movw	r30, r24
 37a:	67 2f       	mov	r22, r23
 37c:	71 91       	ld	r23, Z+
 37e:	77 23       	and	r23, r23
 380:	e1 f7       	brne	.-8      	; 0x37a <strrev+0x4>
 382:	32 97       	sbiw	r30, 0x02	; 2
 384:	04 c0       	rjmp	.+8      	; 0x38e <strrev+0x18>
 386:	7c 91       	ld	r23, X
 388:	6d 93       	st	X+, r22
 38a:	70 83       	st	Z, r23
 38c:	62 91       	ld	r22, -Z
 38e:	ae 17       	cp	r26, r30
 390:	bf 07       	cpc	r27, r31
 392:	c8 f3       	brcs	.-14     	; 0x386 <strrev+0x10>
 394:	08 95       	ret

00000396 <ccp_write_io>:
 396:	dc 01       	movw	r26, r24
 398:	28 ed       	ldi	r18, 0xD8	; 216
 39a:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
 39e:	6c 93       	st	X, r22
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
